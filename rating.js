const { Telegraf, Scenes, session } = require('telegraf')
const { MongoClient, ObjectId } = require('mongodb')
const { Markup } = require('telegraf')
const config = require('./config')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.BOT_TOKEN)
const ADMIN_CHAT_ID = config.ADMIN_CHAT_ID
//–æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º–∏
const MAX_FEEDBACK_LENGTH = 1000
// MongoDB connection
const mongoClient = new MongoClient(config.MONGODB_URI)
let db

// –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω–æ–≤)
const ADMIN_IDS = config.ADMIN_IDS

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
	return ADMIN_IDS.includes(userId)
}

function escapeHTML(text) {
	return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
function escapeMarkdown(text) {
	return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&')
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function getWorkshops() {
	try {
		const workshops = await db
			.collection('workshops')
			.find({})
			.collation({ locale: 'ru' })
			.sort({ name: 1 })
			.toArray()
		return workshops
	} catch (error) {
		console.error('Error getting workshops:', error)
		return []
	}
}

async function notifyAdminsAboutNewFeedback(ctx, feedback) {
	try {
		const workshop = await db
			.collection('workshops')
			.findOne({ name: feedback.workshop })

		// –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
		const maxFeedbackLength = MAX_FEEDBACK_LENGTH // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		const truncatedFeedback =
			feedback.text_feedback.length > maxFeedbackLength
				? feedback.text_feedback.substring(0, maxFeedbackLength) + '...'
				: feedback.text_feedback

		let message = 'üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n\n'
		message += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${escapeHTML(feedback.first_name)}`
		if (feedback.last_name) message += ` ${escapeHTML(feedback.last_name)}`
		if (feedback.username) message += ` (@${escapeHTML(feedback.username)})`
		message += `\nüÜî ID: <code>${feedback.user_id}</code>\n\n`

		message += `üè¢ <b>–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è:</b> ${escapeHTML(feedback.workshop)}\n`
		if (workshop) {
			message += `üìç <b>–ê–¥—Ä–µ—Å:</b> ${escapeHTML(workshop.address)}\n`
		}

		message += `üìä <b>–û—Ü–µ–Ω–∫–∏:</b>\n`
		message += `‚≠êÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: ${feedback.quality_rating}/5\n`
		message += `üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: ${feedback.communication_rating}/5\n`
		message += `‚è∞ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: ${feedback.on_time}\n\n`

		message += `üí≠ <b>–û—Ç–∑—ã–≤:</b> ${escapeHTML(truncatedFeedback)}\n\n`

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
		const stats = await getWorkshopStats(feedback.workshop)
		message += `üìà <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π:</b>\n`
		message += `üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${stats.total_reviews}\n`
		message += `‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${
			stats.avg_quality ? stats.avg_quality.toFixed(2) : '0'
		}/5\n`
		message += `üí¨ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: ${
			stats.avg_communication ? stats.avg_communication.toFixed(2) : '0'
		}/5\n`
		message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: ${stats.on_time_count}\n`
		message += `‚ùå –° –∑–∞–¥–µ—Ä–∂–∫–æ–π: ${stats.delayed_count}\n\n`

		message += `üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤: /delete_feedback ${feedback._id}`

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
		await ctx.telegram.sendMessage(ADMIN_CHAT_ID, message, {
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})
	} catch (error) {
		console.error('Error sending admin notification:', error)
	}
}

async function addWorkshop(data) {
	try {
		const exists = await db.collection('workshops').findOne({ name: data.name })
		if (exists) {
			return false
		}
		await db.collection('workshops').insertOne({
			name: data.name,
			address: data.address,
			description: data.description,
			created_at: new Date(),
		})
		return true
	} catch (error) {
		console.error('Error adding workshop:', error)
		return false
	}
}

async function getAllFeedbacks(limit = 50) {
	return await db
		.collection('feedback')
		.find({})
		.sort({ created_at: -1 })
		.limit(limit)
		.toArray()
}

async function getUserFeedbacks(userId) {
	return await db
		.collection('feedback')
		.find({ user_id: userId })
		.sort({ created_at: -1 })
		.toArray()
}

async function getWorkshopStats(workshop) {
	const aggregation = await db
		.collection('feedback')
		.aggregate([
			{ $match: { workshop: workshop } },
			{
				$group: {
					_id: null,
					total_reviews: { $sum: 1 },
					avg_quality: { $avg: '$quality_rating' },
					avg_communication: { $avg: '$communication_rating' },
					on_time_count: {
						$sum: { $cond: [{ $eq: ['$on_time', '–î–∞'] }, 1, 0] },
					},
					delayed_count: {
						$sum: { $cond: [{ $eq: ['$on_time', '–ù–µ—Ç'] }, 1, 0] },
					},
				},
			},
		])
		.toArray()

	return (
		aggregation[0] || {
			total_reviews: 0,
			avg_quality: 0,
			avg_communication: 0,
			on_time_count: 0,
			delayed_count: 0,
		}
	)
}

async function getLastReviews(workshop, limit = 3) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
	const allReviews = await db
		.collection('feedback')
		.find({ workshop: workshop })
		.sort({ created_at: -1 })
		.toArray()

	// –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
	const reviewsWithText = allReviews.filter(
		review => review.text_feedback && review.text_feedback.trim() !== ''
	)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–∑—ã–≤–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
	return reviewsWithText.slice(0, limit)
}

async function getWorkshopsList() {
	const workshops = await getWorkshops()
	const workshopsData = []

	for (const workshop of workshops) {
		const feedbacks = await db
			.collection('feedback')
			.find({ workshop: workshop.name })
			.toArray()

		const total_reviews = feedbacks.length
		const on_time_count = feedbacks.filter(f => f.on_time === '–î–∞').length

		const onTimePercentage =
			total_reviews > 0
				? ((on_time_count / total_reviews) * 100).toFixed(1)
				: '0.0'

		workshopsData.push({
			name: workshop.name,
			address: workshop.address,
			description: workshop.description,
			avg_quality: calculateAverage(feedbacks, 'quality_rating'),
			avg_communication: calculateAverage(feedbacks, 'communication_rating'),
			total_reviews: total_reviews,
			on_time_count: on_time_count,
			on_time_percentage: onTimePercentage,
		})
	}

	return workshopsData
}

function calculateAverage(feedbacks, field) {
	if (feedbacks.length === 0) return '0.00'
	const sum = feedbacks.reduce((acc, curr) => acc + (curr[field] || 0), 0)
	return (sum / feedbacks.length).toFixed(2)
}

function formatWorkshopsListMessage(workshops) {
	if (workshops.length === 0) {
		return '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.'
	}

	let message = 'üìã *–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:*\n\n'
	workshops.forEach((workshop, index) => {
		message += `*${index + 1}. ${workshop.name}*\n`
		message += `üìç *–ê–¥—Ä–µ—Å:* ${workshop.address}\n`
		message += `‚ÑπÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* ${workshop.description}\n`
		message += `‚≠êÔ∏è *–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:* ${workshop.avg_quality}/5\n`
		message += `üí¨ *–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏:* ${workshop.avg_communication}/5\n`
		message += `‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è:* ${workshop.on_time_percentage}%\n`
		message += `üìù *–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:* ${workshop.total_reviews}\n\n`
	})
	return message
}

function formatFeedbackMessage(feedback, includeDeleteButton = true) {
	let message = ''
	const userName =
		feedback.first_name + (feedback.last_name ? ` ${feedback.last_name}` : '')

	message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (ID: ${feedback.user_id})\n`
	message += `üè¢ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è: ${feedback.workshop}\n`
	message += `‚≠êÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: ${feedback.quality_rating}\n`
	message += `üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: ${feedback.communication_rating}\n`
	message += `‚è∞ –í–æ–≤—Ä–µ–º—è: ${feedback.on_time}\n`
	message += `üìù –û—Ç–∑—ã–≤: ${feedback.text_feedback}\n`
	message += `üìÖ –î–∞—Ç–∞: ${new Date(feedback.created_at).toLocaleString()}\n`

	if (includeDeleteButton) {
		message += `\nüóë –£–¥–∞–ª–∏—Ç—å: /delete_feedback ${feedback._id}\n`
	}

	return message
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getAdminKeyboard() {
	return Markup.inlineKeyboard([
		[Markup.button.callback('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã', 'admin_all_feedbacks')],
		[Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_search_user')],
		[Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä—Å–∫—É—é', 'admin_add_workshop')],
		[Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä—Å–∫—É—é', 'admin_remove_workshop')],
		[Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö', 'admin_list_workshops')],
	])
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const mainKeyboard = Markup.keyboard([
	['üëç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'üìä –†–µ–π—Ç–∏–Ω–≥/–û—Ç–∑—ã–≤—ã'],
	['üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤'],
]).resize()

function getMainKeyboard() {
	return Markup.keyboard([
		['üëç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'üìä –†–µ–π—Ç–∏–Ω–≥/–û—Ç–∑—ã–≤—ã'],
		['üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤'],
	]).resize()
}

// –°—Ü–µ–Ω—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
const workshopScene = new Scenes.BaseScene('workshop')
workshopScene.enter(async ctx => {
	const workshops = await getWorkshops()
	if (workshops.length === 0) {
		ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.')
		return ctx.scene.leave()
	}

	ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é:',
		Markup.inlineKeyboard(
			workshops.map(workshop => [
				Markup.button.callback(workshop.name, `workshop_${workshop.name}`),
			])
		)
	)
})

workshopScene.action(/workshop_(.+)/, ctx => {
	const workshop = ctx.match[1]
	ctx.session.workshop = workshop
	ctx.editMessageReplyMarkup({ inline_keyboard: [] })
	ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${workshop}`)
	ctx.scene.enter('quality')
})

const qualityScene = new Scenes.BaseScene('quality')
qualityScene.enter(ctx => {
	ctx.reply(
		'–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –æ—Ç 1 –¥–æ 5:',
		Markup.keyboard([['1', '2', '3', '4', '5']])
			.oneTime()
			.resize()
	)
})

qualityScene.on('text', ctx => {
	if (!['1', '2', '3', '4', '5'].includes(ctx.message.text)) {
		return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5')
	}
	ctx.session.quality = parseInt(ctx.message.text)
	ctx.scene.enter('onTime')
})

const onTimeScene = new Scenes.BaseScene('onTime')
onTimeScene.enter(ctx => {
	ctx.reply(
		'–†–µ–º–æ–Ω—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤ –æ–≥–æ–≤–æ—Ä–µ–Ω–Ω—ã–π —Å—Ä–æ–∫?',
		Markup.keyboard([['–î–∞', '–ù–µ—Ç']])
			.oneTime()
			.resize()
	)
})

onTimeScene.on('text', ctx => {
	if (!['–î–∞', '–ù–µ—Ç'].includes(ctx.message.text)) {
		return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç')
	}
	ctx.session.onTime = ctx.message.text
	ctx.scene.enter('communication')
})

const communicationScene = new Scenes.BaseScene('communication')
communicationScene.enter(ctx => {
	ctx.reply(
		'–û—Ü–µ–Ω–∏—Ç–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –æ—Ç 1 –¥–æ 5:',
		Markup.keyboard([['1', '2', '3', '4', '5']])
			.oneTime()
			.resize()
	)
})

communicationScene.on('text', ctx => {
	if (!['1', '2', '3', '4', '5'].includes(ctx.message.text)) {
		return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5')
	}
	ctx.session.communication = parseInt(ctx.message.text)
	ctx.scene.enter('textFeedback')
})

const textFeedbackScene = new Scenes.BaseScene('textFeedback')
textFeedbackScene.enter(ctx => {
	ctx.reply(
		`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π (–º–∞–∫—Å–∏–º—É–º ${MAX_FEEDBACK_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)\n` +
			'–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤:',
		Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']])
			.oneTime()
			.resize()
	)
})

textFeedbackScene.on('text', async ctx => {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
	if (ctx.message.text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
		ctx.session.textFeedback = '' // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
	} else {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–∑—ã–≤–∞
		if (ctx.message.text.length > MAX_FEEDBACK_LENGTH) {
			await ctx.reply(
				`‚ö†Ô∏è –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - ${MAX_FEEDBACK_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n` +
					`–í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ${ctx.message.text.length} —Å–∏–º–≤–æ–ª–æ–≤.\n\n` +
					`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":`,
				Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']])
					.oneTime()
					.resize()
			)
			return
		}
		ctx.session.textFeedback = ctx.message.text
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–∞
	const feedback = {
		user_id: ctx.from.id,
		first_name: ctx.from.first_name,
		last_name: ctx.from.last_name,
		username: ctx.from.username,
		workshop: ctx.session.workshop,
		quality_rating: ctx.session.quality,
		on_time: ctx.session.onTime,
		communication_rating: ctx.session.communication,
		text_feedback: ctx.session.textFeedback,
		created_at: new Date(),
	}

	// –û–±—ä—è–≤–ª—è–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	let previewMessage = 'üìù <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞:</b>\n\n'
	previewMessage += `<b>üè¢ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è:</b> ${escapeHTML(feedback.workshop)}\n`
	previewMessage += `<b>‚≠êÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ:</b> ${feedback.quality_rating}/5\n`
	previewMessage += `<b>üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è:</b> ${feedback.communication_rating}/5\n`
	previewMessage += `<b>‚è∞ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è:</b> ${feedback.on_time}\n`
	if (feedback.text_feedback) {
		previewMessage += `üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${escapeHTML(
			feedback.text_feedback
		)}\n`
	}

	await ctx.reply(previewMessage, {
		parse_mode: 'HTML',
		reply_markup: Markup.inlineKeyboard([
			[
				Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_feedback'),
				Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_feedback'),
			],
		]).reply_markup,
	})
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
textFeedbackScene.action('confirm_feedback', async ctx => {
	try {
		const feedback = {
			user_id: ctx.from.id,
			first_name: ctx.from.first_name,
			last_name: ctx.from.last_name,
			username: ctx.from.username,
			workshop: ctx.session.workshop,
			quality_rating: ctx.session.quality,
			on_time: ctx.session.onTime,
			communication_rating: ctx.session.communication,
			text_feedback: ctx.session.textFeedback,
			created_at: new Date(),
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		const result = await db.collection('feedback').insertOne(feedback)
		feedback._id = result.insertedId

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!')
		await ctx.reply('‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', getMainKeyboard())

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
		await notifyAdminsAboutNewFeedback(ctx, feedback)

		ctx.scene.leave()
	} catch (error) {
		console.error('Error saving feedback:', error)
		await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.')
		await ctx.reply(
			'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.',
			getMainKeyboard()
		)
		ctx.scene.leave()
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–∑—ã–≤–∞
textFeedbackScene.action('cancel_feedback', async ctx => {
	await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω')
	await ctx.reply('‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω.', getMainKeyboard())
	ctx.scene.leave()
})

// –°—Ü–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const searchUserScene = new Scenes.BaseScene('search_user_scene')
searchUserScene.enter(async ctx => {
	await ctx.editMessageText(
		'–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:',
		Markup.inlineKeyboard([[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'admin_back')]])
	)
})

searchUserScene.on('text', async ctx => {
	try {
		const users = await db
			.collection('feedback')
			.aggregate([
				{
					$match: {
						$or: [
							{ first_name: { $regex: ctx.message.text, $options: 'i' } },
							{ last_name: { $regex: ctx.message.text, $options: 'i' } },
							{ username: { $regex: ctx.message.text, $options: 'i' } },
						],
					},
				},
				{
					$group: {
						_id: '$user_id',
						first_name: { $first: '$first_name' },
						last_name: { $first: '$last_name' },
						username: { $first: '$username' },
						feedback_count: { $sum: 1 },
					},
				},
			])
			.toArray()

		if (users.length === 0) {
			await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
		} else {
			let message = 'üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n'
			const keyboard = []

			users.forEach(user => {
				const userName =
					user.first_name + (user.last_name ? ` ${user.last_name}` : '')
				message += `üë§ ${userName}\n`
				if (user.username) message += `@${user.username}\n`
				message += `ID: ${user._id}\n`
				message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ${user.feedback_count}\n\n`

				keyboard.push([
					Markup.button.callback(
						`–û—Ç–∑—ã–≤—ã ${userName}`,
						`user_feedbacks_${user._id}`
					),
				])
			})

			keyboard.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')])

			await ctx.reply(message, Markup.inlineKeyboard(keyboard))
		}
		ctx.scene.leave()
	} catch (error) {
		console.error('Error searching users:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
		ctx.scene.leave()
	}
})

// –°—Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
const addWorkshopScene = new Scenes.BaseScene('add_workshop_scene')
addWorkshopScene.enter(async ctx => {
	ctx.session.workshop = {}
	await ctx.editMessageText(
		'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π:',
		Markup.inlineKeyboard([[Markup.button.callback('¬´ –û—Ç–º–µ–Ω–∞', 'admin_back')]])
	)
})

addWorkshopScene.on('text', async ctx => {
	if (!ctx.session.workshop.name) {
		ctx.session.workshop.name = ctx.message.text
		await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π:')
		return
	}

	if (!ctx.session.workshop.address) {
		ctx.session.workshop.address = ctx.message.text
		await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π:')
		return
	}

	if (!ctx.session.workshop.description) {
		ctx.session.workshop.description = ctx.message.text

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
		const previewMessage =
			`üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
			`–ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.session.workshop.name}\n` +
			`–ê–¥—Ä–µ—Å: ${ctx.session.workshop.address}\n` +
			`–û–ø–∏—Å–∞–Ω–∏–µ: ${ctx.session.workshop.description}`

		await ctx.reply(
			previewMessage,
			Markup.inlineKeyboard([
				[
					Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_workshop_add'),
					Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_workshop_add'),
				],
			])
		)
	}
})

addWorkshopScene.action('confirm_workshop_add', async ctx => {
	try {
		const success = await addWorkshop(ctx.session.workshop)
		if (success) {
			await ctx.answerCbQuery('–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
			await ctx.reply(
				`–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è "${ctx.session.workshop.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`
			)
		} else {
			await ctx.answerCbQuery('–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
			await ctx.reply('–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
		}
	} catch (error) {
		console.error('Error adding workshop:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π.')
	}
	ctx.scene.leave()
})

addWorkshopScene.action('cancel_workshop_add', async ctx => {
	await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –æ—Ç–º–µ–Ω–µ–Ω–æ')
	await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –æ—Ç–º–µ–Ω–µ–Ω–æ.')
	ctx.scene.leave()
})

// –°–æ–∑–¥–∞–Ω–∏–µ stage
const stage = new Scenes.Stage([
	workshopScene,
	qualityScene,
	onTimeScene,
	communicationScene,
	textFeedbackScene,
	searchUserScene,
	addWorkshopScene,
])

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
bot.use(session())
bot.use(stage.middleware())

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', ctx => {
	if (ctx.chat.type !== 'private') {
		return // –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
	}
	ctx.reply(
		'–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
		getMainKeyboard() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	)
})

bot.command('admin', async ctx => {
	if (!isAdmin(ctx.from.id)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
	}

	ctx.reply(
		'üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
		getAdminKeyboard()
	)
})

bot.command('delete_feedback', async ctx => {
	if (!isAdmin(ctx.from.id)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤.')
	}

	const feedbackId = ctx.message.text.split('/delete_feedback ')[1]
	if (!feedbackId) {
		return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞.')
	}

	try {
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
		await ctx.reply(
			`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ ${feedbackId}?`,
			Markup.inlineKeyboard([
				[
					Markup.button.callback('‚úÖ –î–∞', `confirm_delete_${feedbackId}`),
					Markup.button.callback('‚ùå –ù–µ—Ç', 'cancel_delete'),
				],
			])
		)
	} catch (error) {
		console.error('Error with delete command:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.')
	}
})

bot.command('set_admin_chat', async ctx => {
	if (!isAdmin(ctx.from.id)) {
		return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
	}

	if (ctx.chat.type !== 'supergroup') {
		return ctx.reply(
			'–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç.'
		)
	}

	try {
		// –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥
		await ctx.reply(`ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: ${ctx.chat.id}\n`)
	} catch (error) {
		console.error('Error setting admin chat:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞.')
	}
})
bot.action(/stats_(.+)/, async ctx => {
	try {
		await ctx.answerCbQuery()
		const workshopName = ctx.match[1]

		const workshop = await db
			.collection('workshops')
			.findOne({ name: workshopName })
		if (!workshop) {
			await ctx.reply('–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
			return
		}

		const stats = await getWorkshopStats(workshopName)
		const lastReviews = await getLastReviews(workshopName, 3)

		let message = `üìä ${workshop.name}\n\n`
		message += `üìç –ê–¥—Ä–µ—Å: ${workshop.address}\n`
		message += `‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: ${workshop.description}\n\n`
		message += `üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${stats.total_reviews}\n`
		message += `‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${
			stats.avg_quality ? stats.avg_quality.toFixed(2) : '0'
		}\n`
		message += `üí¨ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: ${
			stats.avg_communication ? stats.avg_communication.toFixed(2) : '0'
		}\n`
		message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: ${stats.on_time_count}\n`
		message += `‚ùå –° –∑–∞–¥–µ—Ä–∂–∫–æ–π: ${stats.delayed_count}\n\n`

		if (lastReviews && lastReviews.length > 0) {
			message += 'üìå *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:*\n'
			lastReviews.forEach(review => {
				const name = escapeMarkdown(
					review.first_name + (review.last_name ? ` ${review.last_name}` : '')
				)

				message += `\n- –û—Ç ${
					isAdmin(ctx.from.id) ? escapeMarkdown(name) : '–ê–Ω–æ–Ω–∏–º'
				}\n`
				const truncatedFeedback =
					review.text_feedback.length > MAX_FEEDBACK_LENGTH
						? review.text_feedback.substring(0, MAX_FEEDBACK_LENGTH)
						: review.text_feedback
				message += `  –û—Ç–∑—ã–≤: ${truncatedFeedback}\n`
				message += `  –î–∞—Ç–∞: ${new Date(review.created_at).toLocaleDateString(
					'ru-RU'
				)}\n`
			})
		}

		await ctx.editMessageText(message, {
			parse_mode: 'Markdown',
			reply_markup: Markup.inlineKeyboard([
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'back_to_workshops')],
			]).reply_markup,
		})
	} catch (error) {
		console.error('Error getting workshop stats:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
	}
})

bot.action('back_to_workshops', async ctx => {
	await ctx.answerCbQuery()
	const workshops = await getWorkshops()

	if (workshops.length === 0) {
		return ctx.editMessageText('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.')
	}

	await ctx.editMessageText(
		'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
		Markup.inlineKeyboard(
			workshops.map(workshop => [
				Markup.button.callback(workshop.name, `stats_${workshop.name}`),
			])
		)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
bot.action('admin_all_feedbacks', async ctx => {
	await ctx.answerCbQuery()

	const keyboard = Markup.inlineKeyboard([
		[
			Markup.button.callback('10 –æ—Ç–∑—ã–≤–æ–≤', 'feedbacks_10'),
			Markup.button.callback('30 –æ—Ç–∑—ã–≤–æ–≤', 'feedbacks_30'),
			Markup.button.callback('50 –æ—Ç–∑—ã–≤–æ–≤', 'feedbacks_50'),
		],
		[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')],
	])

	await ctx.editMessageText(
		'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
		keyboard
	)
})
;['10', '30', '50'].forEach(number => {
	bot.action(`feedbacks_${number}`, async ctx => {
		await ctx.answerCbQuery()

		try {
			const feedbacks = await getAllFeedbacks(parseInt(number))
			if (feedbacks.length === 0) {
				await ctx.reply('–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
				return
			}

			const messages = []
			let currentMessage = `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${feedbacks.length} –æ—Ç–∑—ã–≤–æ–≤:\n\n`
			options = {
				year: 'numeric',
				month: 'numeric',
				day: 'numeric',
				hours: 'numeric',
				minutes: 'numeric',
			}
			for (const feedback of feedbacks) {
				const userName =
					feedback.first_name +
					(feedback.last_name ? ` ${feedback.last_name}` : '')
				let feedbackMessage = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (ID: ${feedback.user_id})\n`
				feedbackMessage += `üè¢ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è: ${feedback.workshop}\n`
				feedbackMessage += `‚≠êÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: ${feedback.quality_rating}\n`
				feedbackMessage += `üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: ${feedback.communication_rating}\n`
				feedbackMessage += `‚è∞ –í–æ–≤—Ä–µ–º—è: ${feedback.on_time}\n`
				feedbackMessage += `üìù –û—Ç–∑—ã–≤: ${feedback.text_feedback}\n`
				feedbackMessage += `üìÖ –î–∞—Ç–∞: ${new Date(
					feedback.created_at
				).toLocaleString('ru-RU')}\n`
				feedbackMessage += `üóë –£–¥–∞–ª–∏—Ç—å: /delete_feedback ${feedback._id}\n\n`

				if (currentMessage.length + feedbackMessage.length > 3800) {
					messages.push(currentMessage)
					currentMessage = feedbackMessage
				} else {
					currentMessage += feedbackMessage
				}
			}

			if (currentMessage) {
				messages.push(currentMessage)
			}

			for (const message of messages) {
				await ctx.reply(message)
			}
		} catch (error) {
			console.error('Error getting feedbacks:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.')
		}
	})
})

bot.action('admin_search_user', async ctx => {
	await ctx.answerCbQuery()
	ctx.scene.enter('search_user_scene')
})

bot.action('admin_add_workshop', async ctx => {
	await ctx.answerCbQuery()
	ctx.scene.enter('add_workshop_scene')
})

bot.action('admin_remove_workshop', async ctx => {
	await ctx.answerCbQuery()

	const workshops = await getWorkshops()
	if (workshops.length === 0) {
		await ctx.editMessageText(
			'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.',
			Markup.inlineKeyboard([[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')]])
		)
		return
	}

	const keyboard = workshops.map(workshop => [
		Markup.button.callback(
			`‚ùå ${workshop.name}`,
			`remove_workshop_${workshop.name}`
		),
	])
	keyboard.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')])

	await ctx.editMessageText(
		'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
		Markup.inlineKeyboard(keyboard)
	)
})

bot.action(/feedbacks_(\d+)/, async ctx => {
	await ctx.answerCbQuery()
	const limit = parseInt(ctx.match[1])

	try {
		const feedbacks = await getAllFeedbacks(limit)
		if (feedbacks.length === 0) {
			await ctx.reply('–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
			return
		}

		const messages = []
		let currentMessage = `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${feedbacks.length} –æ—Ç–∑—ã–≤–æ–≤:\n\n`

		for (const feedback of feedbacks) {
			const feedbackMessage = formatFeedbackMessage(feedback, true) + '\n'

			if (currentMessage.length + feedbackMessage.length > 3800) {
				messages.push(currentMessage)
				currentMessage = feedbackMessage
			} else {
				currentMessage += feedbackMessage
			}
		}

		if (currentMessage) {
			messages.push(currentMessage)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
		for (const message of messages) {
			await ctx.reply(message)
		}
	} catch (error) {
		console.error('Error getting feedbacks:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.')
	}
})

bot.action(/user_feedbacks_(\d+)/, async ctx => {
	await ctx.answerCbQuery()
	const userId = parseInt(ctx.match[1])

	try {
		const feedbacks = await getUserFeedbacks(userId)
		if (feedbacks.length === 0) {
			await ctx.reply('–û—Ç–∑—ã–≤—ã –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
			return
		}

		const messages = []
		let currentMessage = `üìä –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n`

		for (const feedback of feedbacks) {
			const feedbackMessage = formatFeedbackMessage(feedback, true) + '\n'

			if (currentMessage.length + feedbackMessage.length > 3800) {
				messages.push(currentMessage)
				currentMessage = feedbackMessage
			} else {
				currentMessage += feedbackMessage
			}
		}

		if (currentMessage) {
			messages.push(currentMessage)
		}

		for (const message of messages) {
			await ctx.reply(message)
		}
	} catch (error) {
		console.error('Error getting user feedbacks:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.')
	}
})

bot.action(/remove_workshop_(.+)/, async ctx => {
	await ctx.answerCbQuery()
	const workshopName = ctx.match[1]

	try {
		const result = await db
			.collection('workshops')
			.deleteOne({ name: workshopName })
		if (result.deletedCount > 0) {
			await ctx.editMessageText(
				`–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è "${workshopName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`,
				Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')],
				])
			)
		} else {
			await ctx.reply('–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
		}
	} catch (error) {
		console.error('Error removing workshop:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π.')
	}
})

bot.action(/confirm_delete_(.+)/, async ctx => {
	if (!isAdmin(ctx.from.id)) {
		await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤.')
		return
	}

	const feedbackId = ctx.match[1]
	try {
		const result = await db.collection('feedback').deleteOne({
			_id: new ObjectId(feedbackId),
		})

		if (result.deletedCount > 0) {
			await ctx.answerCbQuery('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
			await ctx.editMessageText('‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
		} else {
			await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
			await ctx.editMessageText('‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
		}
	} catch (error) {
		console.error('Error deleting feedback:', error)
		await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.')
		await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.')
	}
})

bot.action('cancel_delete', async ctx => {
	await ctx.answerCbQuery('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
	await ctx.editMessageText('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
})

bot.action('admin_list_workshops', async ctx => {
	await ctx.answerCbQuery()

	const workshops = await getWorkshops()
	if (workshops.length === 0) {
		await ctx.editMessageText(
			'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.',
			Markup.inlineKeyboard([[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')]])
		)
		return
	}

	let message = 'üìã –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö:\n\n'
	workshops.forEach((workshop, index) => {
		message += `${index + 1}. ${workshop.name}\n`
		message += `üìç ${workshop.address}\n`
		message += `‚ÑπÔ∏è ${workshop.description}\n\n`
	})

	await ctx.editMessageText(
		message,
		Markup.inlineKeyboard([[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'admin_back')]])
	)
})

bot.action('admin_back', async ctx => {
	await ctx.answerCbQuery()
	await ctx.editMessageText(
		'üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
		getAdminKeyboard()
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears('üëç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', async ctx => {
	try {
		// const canVote = await canUserVote(ctx.from.id)

		// if (!canVote) {
		// 	await ctx.reply(
		// 		'‚ö†Ô∏è –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–≤—Ç—Ä–∞.',
		// 		getMainKeyboard()
		// 	)
		// 	return
		// }

		ctx.scene.enter('workshop')
	} catch (error) {
		console.error('Error in vote handler:', error)
		await ctx.reply(
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.',
			getMainKeyboard()
		)
	}
})

bot.hears('üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤', async ctx => {
	const workshops = await getWorkshopsList()
	const message = formatWorkshopsListMessage(workshops)
	await ctx.replyWithMarkdown(message) // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
})

bot.hears('üìä –†–µ–π—Ç–∏–Ω–≥/–û—Ç–∑—ã–≤—ã', async ctx => {
	await ctx.reply(
		'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
		Markup.inlineKeyboard([
			[Markup.button.callback('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', 'view_ratings')],
			[Markup.button.callback('üí¨ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', 'view_reviews')],
		])
	)
})

bot.action('view_ratings', async ctx => {
	await ctx.editMessageText(
		'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:',
		Markup.inlineKeyboard([
			[Markup.button.callback('‚≠êÔ∏è –ü–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç', 'rating_quality')],
			[Markup.button.callback('üí¨ –ü–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', 'rating_communication')],
			[Markup.button.callback('‚è∞ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤', 'rating_delays')],
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_rating_menu')],
		])
	)
})

bot.action('view_reviews', async ctx => {
	const workshops = await getWorkshops()
	if (workshops.length === 0) {
		return ctx.editMessageText(
			'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä—Å–∫–∏—Ö.',
			Markup.inlineKeyboard([
				[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_rating_menu')],
			])
		)
	}

	const keyboard = workshops.map(workshop => [
		Markup.button.callback(workshop.name, `show_reviews_${workshop.name}_0`), // –î–æ–±–∞–≤–ª—è–µ–º _0 –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	])
	keyboard.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_rating_menu')])

	await ctx.editMessageText(
		'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:',
		Markup.inlineKeyboard(keyboard)
	)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
bot.action('rating_quality', async ctx => {
	const workshops = await getWorkshopsList()
	workshops.sort((a, b) => b.avg_quality - a.avg_quality)

	let message = 'üìä <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç:</b>\n\n'
	workshops.forEach((workshop, index) => {
		message += `<b>${index + 1}. ${escapeHTML(workshop.name)}</b>\n`
		message += `‚≠êÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: <b>${workshop.avg_quality}/5</b>\n`
		message += `üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>${workshop.total_reviews}</b>\n\n`
	})

	await ctx.editMessageText(message, {
		parse_mode: 'HTML',
		reply_markup: Markup.inlineKeyboard([
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'view_ratings')],
		]).reply_markup,
	})
})

bot.action('rating_communication', async ctx => {
	const workshops = await getWorkshopsList()
	workshops.sort((a, b) => b.avg_communication - a.avg_communication)

	let message = 'üìä <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏:</b>\n\n'
	workshops.forEach((workshop, index) => {
		message += `<b>${index + 1}. ${escapeHTML(workshop.name)}</b>\n`
		message += `üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: <b>${workshop.avg_communication}/5</b>\n`
		message += `üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>${workshop.total_reviews}</b>\n\n`
	})

	await ctx.editMessageText(message, {
		parse_mode: 'HTML',
		reply_markup: Markup.inlineKeyboard([
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'view_ratings')],
		]).reply_markup,
	})
})

bot.action('rating_delays', async ctx => {
	const workshops = await getWorkshopsList()

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤–æ–≤—Ä–µ–º—è (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
	workshops.sort((a, b) => {
		const onTimePercentA =
			a.total_reviews > 0 ? (a.on_time_count / a.total_reviews) * 100 : 0
		const onTimePercentB =
			b.total_reviews > 0 ? (b.on_time_count / b.total_reviews) * 100 : 0
		return onTimePercentB - onTimePercentA
	})

	let message = 'üìä <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—é —Å—Ä–æ–∫–æ–≤:</b>\n\n'
	workshops.forEach((workshop, index) => {
		const onTimePercentage =
			workshop.total_reviews > 0
				? ((workshop.on_time_count / workshop.total_reviews) * 100).toFixed(1)
				: '0.0'

		message += `<b>${index + 1}. ${escapeHTML(workshop.name)}</b>\n`
		message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: <b>${onTimePercentage}%</b>\n`
		message += `üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>${workshop.total_reviews}</b>\n\n`
	})

	await ctx.editMessageText(message, {
		parse_mode: 'HTML',
		reply_markup: Markup.inlineKeyboard([
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'view_ratings')],
		]).reply_markup,
	})
})

bot.action(/show_reviews_(.+)_(\d+)/, async ctx => {
	const workshopName = ctx.match[1]
	const page = parseInt(ctx.match[2])
	const reviewsPerPage = 5

	try {
		const totalReviews = await db.collection('feedback').countDocuments({
			workshop: workshopName,
			text_feedback: { $exists: true, $ne: '' },
		})

		const totalPages = Math.ceil(totalReviews / reviewsPerPage)

		const reviews = await db
			.collection('feedback')
			.find({
				workshop: workshopName,
				text_feedback: { $exists: true, $ne: '' },
			})
			.sort({ created_at: -1 })
			.skip(page * reviewsPerPage)
			.limit(reviewsPerPage)
			.toArray()

		if (reviews.length === 0 && page === 0) {
			await ctx.editMessageText(
				'–î–ª—è –¥–∞–Ω–Ω–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.',
				Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'view_reviews')],
				])
			)
			return
		}

		let message = `üí¨ <b>–û—Ç–∑—ã–≤—ã –æ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π "${escapeHTML(
			workshopName
		)}"</b>\n`
		message += `<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}</i>\n\n`

		reviews.forEach(review => {
			message += `–û—Ç–∑—ã–≤ –æ—Ç ${new Date(review.created_at).toLocaleDateString(
				'ru-RU'
			)}\n`
			message += `‚≠êÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: <b>${review.quality_rating}/5</b>\n`
			message += `üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: <b>${review.communication_rating}/5</b>\n`
			message += `‚è∞ –í–æ–≤—Ä–µ–º—è: <b>${review.on_time}</b>\n`
			message += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${escapeHTML(review.text_feedback)}\n\n`
		})

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		const keyboard = []
		const navigationRow = []

		if (page > 0) {
			navigationRow.push(
				Markup.button.callback(
					'¬´ –ü—Ä–µ–¥—ã–¥—É—â–∞—è',
					`show_reviews_${workshopName}_${page - 1}`
				)
			)
		}
		if (page < totalPages - 1) {
			navigationRow.push(
				Markup.button.callback(
					'–°–ª–µ–¥—É—é—â–∞—è ¬ª',
					`show_reviews_${workshopName}_${page + 1}`
				)
			)
		}
		if (navigationRow.length > 0) {
			keyboard.push(navigationRow)
		}
		keyboard.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'view_reviews')])

		await ctx.editMessageText(message, {
			parse_mode: 'HTML',
			reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
		})
	} catch (error) {
		console.error('Error getting workshop reviews:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.')
	}
})

bot.action('back_to_rating_menu', async ctx => {
	await ctx.editMessageText(
		'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
		Markup.inlineKeyboard([
			[Markup.button.callback('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', 'view_ratings')],
			[Markup.button.callback('üí¨ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', 'view_reviews')],
		])
	)
})

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function canUserVote(userId) {
	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞
	if (isAdmin(userId)) {
		return true
	}

	try {
		const lastFeedback = await db
			.collection('feedback')
			.findOne({ user_id: userId }, { sort: { created_at: -1 } })

		if (!lastFeedback) {
			return true // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
		}

		const lastVoteDate = new Date(lastFeedback.created_at)
		const currentDate = new Date()

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
		lastVoteDate.setHours(0, 0, 0, 0)
		currentDate.setHours(0, 0, 0, 0)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –æ–¥–∏–Ω –¥–µ–Ω—å
		return lastVoteDate.getTime() < currentDate.getTime()
	} catch (error) {
		console.error('Error checking user vote:', error)
		return false
	}
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function setupDatabase() {
	try {
		await db.collection('workshops').createIndex({ name: 1 }, { unique: true })
		console.log('Database indexes created')
	} catch (error) {
		console.error('Error creating indexes:', error)
	}
}

async function connectToMongo() {
	try {
		await mongoClient.connect()
		db = mongoClient.db(config.DB_NAME)
		await setupDatabase()
		console.log('Connected to MongoDB')
	} catch (error) {
		console.error('MongoDB connection error:', error)
	}
}

connectToMongo().then(() => {
	bot.launch().then(() => {
		console.log('Bot started')
	})
})

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
	mongoClient.close()
	bot.stop('SIGINT')
})
process.once('SIGTERM', () => {
	mongoClient.close()
	bot.stop('SIGTERM')
})
